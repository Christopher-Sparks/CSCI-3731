1. Upcasting means to refer to an object as if it were its superclass. In C++, this is done through either a pointer or reference. Downcasting is when you convert an object back to its subclass. In C++, the safest way to do this is through the dynamic cast. 

2. Marking a method as virtual will ensure that the subclass will override a method in the superclass. Without one, if an object is upcasted as the superclass and calls that method, it may use the superclass's method instead of the subclass's method. You don't use a virtual method when you don't have to override a method as marking it as virtual will cause the program to run slower. 

3. Dynamic cast looks at the actual type of the object being casts and  makes sure it is legal to cast it to the requested type. For instance, illegal casting to a pointer will return NULL and illegal casting to a reference will throw an exception. Static casting on the other hand doesn't do this check and will allow to compile. You would want to use dynamic casting as it is much safer. However, static casting is faster as it doesn't do as many checks during compile time. 

4. A const cast is used for getting rid of the const properties. This is useful for instances when calling another library. And its methods are not marked as const when they should be. Using a const cast will help you get through this as normally you are not able to pass const arguments as non-const arguments. 

5. Unlike the "void eat(Fruit f)", the "void eat(const Fruit& f)" ensures that the Banana you will be passing into the method will not be modified due to it being declared as a const. Another thing to keep in mind is that the second one is taking a reference as the argument, so be sure to turn your object to a reference before using the method. 

6. In java you are not allowed to have multiple inheritance. Meaning that one subclass cannot have two superclasses associated with it - you are allowed strictly one parent. Instead, java offers interfaces, which allow you to group together classes in ways that violate the normal inheritance tree. This is not the case in C++. You are allowed to have 0 or more than 1 parent class. This can cause trouble when dealing with which superclass method should the subclass inherit if they are named the same. Therefore, you either should just not use C++ multiple inheritance or have one of the superclasses be empty with only pure virtual methods. 